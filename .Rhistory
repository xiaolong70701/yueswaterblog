CDF_X <- function(x, N) {
if (x < 1) {
return(0)
} else if (x >= N) {
return(1)
} else {
j <- floor(x)
return(j / N)
}
}
# Create a sequence of x values
x <- seq(0, 10, by = 0.1) # You can adjust the range of x accordingly
# Compute the corresponding CDF values using the function CDF_X(x)
N <- 5 # You can change the value of N
y <- sapply(x, CDF_X, N)
# Create a data frame to hold the x and y values
df <- data.frame(x = x, F_X = y)
# Plot the CDF F_X(x)
p <- ggplot(df, aes(x, F_X)) +
geom_step(color = "blue", size = 1) +
labs(title = "CDF F_X(x)",
x = "x",
y = "F_X(x)") +
theme_minimal()
# Add extra lines and points
extraLines <- data.frame(x = c(-Inf, max(df$x)), xend = c(min(df$x), Inf), y = c(2, max(df$y)), yend = c(2, max(df$y)))
p +
geom_segment(data = extraLines, aes(x = x, xend = xend, y = y, yend = yend), colour = "red") +
geom_point(data = filter(extraLines, x > 0), aes(x = x, y = y), colour = "red") +
geom_point(data = filter(extraLines, x < max(df$x)), aes(x = xend, y = y), shape = 1, colour = "red")
# Install and load the required package
library(latex2exp)
plot(df$x, df$y, xlim=c(2.5, max(df$x) + .5), ylim=c(0, 1.075), pch=19)
points(df$x + 1, df$y, pch=1)
segments(df$x, df$y, df$x + 1)
extraLines <- data.frame(x = c(-Inf, max(df$x)), xend = c(min(df$x), Inf), y = c(2, max(df$y)), yend = c(2, max(df$y)))
p +
geom_segment(data = extraLines, aes(x = x, xend = xend, y = y, yend = yend), colour = "red") +
geom_point(data = filter(extraLines, x > 0), aes(x = x, y=y), colour = "red") +
geom_point(data = filter(extraLines, x < max(df$x)), aes(x=xend, y=y), shape = 1, colour = "red")
reticulate::repl_python()
# Install and load required packages
install.packages("ggplot2")
install.packages("gridExtra")
library(ggplot2)
library(gridExtra)
set.seed(42)  # For reproducibility
# Sample data
mu <- 0
sigma <- 1
number_of_samples <- 5000
samples <- rnorm(number_of_samples, mean = mu, sd = sigma)
samples <- sort(samples)
x <- seq(-5, 5, length.out = 10000)
true_distribution <- dnorm(x, mean = mu, sd = sigma)
n_bins <- ifelse(number_of_samples < 50, number_of_samples, 50)
# Plot 1: Distribution from Samples
p1 <- ggplot() +
geom_histogram(aes(x = samples), bins = n_bins, fill = "blue", alpha = 0.5) +
geom_line(aes(x = x, y = true_distribution), color = "black", size = 1) +
labs(title = "Plot of distribution from samples",
x = expression(x),
y = "count (normalized to unit area)") +
xlim(-4, 4) +
ylim(0, max(hist(samples, plot = FALSE)$density) * 1.6)
# Plot 2: Cumulative Distribution Function (CDF) for Gaussian
p2 <- ggplot(data.frame(x), aes(x = x)) +
stat_function(fun = pnorm, color = "black", size = 1) +
labs(title = "cumulative distribution function for the Gaussian",
x = expression(x),
y = expression(F(x))) +
xlim(-5, 5) +
ylim(0, 1.1)
# Plot 3: Samples Transformed to Uniform Distribution
output <- pnorm(samples)
p3 <- ggplot() +
geom_histogram(aes(x = output), bins = n_bins, fill = "blue", alpha = 0.5) +
stat_function(fun = punif, args = list(min = 0, max = 1), color = "black", size = 1) +
labs(title = "Samples from the Gaussian transformed",
x = expression(y),
y = "count (normalized to unit area)") +
xlim(-0.25, 1.25) +
ylim(0, max(hist(output, plot = FALSE)$density) * 1.4)
# Plot 4: Samples Transformed Back to Gaussian
recovered <- qnorm(output)
p4 <- ggplot() +
geom_histogram(aes(x = recovered), bins = n_bins, fill = "blue", alpha = 0.5) +
geom_line(aes(x = x, y = true_distribution), color = "black", size = 1) +
labs(title = "Samples transformed from the Uniform",
x = expression(x),
y = "count (normalized to unit area)") +
xlim(-4, 4) +
ylim(0, max(hist(recovered, plot = FALSE)$density) * 1.6)
# Arrange plots in a 2x2 grid
grid.arrange(p1, p2, p3, p4, ncol = 2)
# Note: The `gridExtra` package is used to arrange the plots in a grid. Make sure it is installed before running the code.
source("~/.active-rstudio-document", echo=TRUE)
# 創建示例數據集
set.seed(42)
data1 <- data.frame(x = 1:10, y = rnorm(10, mean = 0, sd = 1))
data2 <- data.frame(x = 1:10, y = rep(0, 10))
data3 <- data.frame(x = 1:10, y = rnorm(10, mean = 0, sd = 1) * -1)
# 繪製三個子圖
plot1 <- ggplot(data1, aes(x, y)) + geom_point() + ggtitle("相關係數 > 0")
library(ggplot2)
# 創建示例數據集
set.seed(42)
data1 <- data.frame(x = 1:10, y = rnorm(10, mean = 0, sd = 1))
data2 <- data.frame(x = 1:10, y = rep(0, 10))
data3 <- data.frame(x = 1:10, y = rnorm(10, mean = 0, sd = 1) * -1)
# 繪製三個子圖
plot1 <- ggplot(data1, aes(x, y)) + geom_point() + ggtitle("相關係數 > 0")
plot2 <- ggplot(data2, aes(x, y)) + geom_point() + ggtitle("相關係數 = 0")
plot3 <- ggplot(data3, aes(x, y)) + geom_point() + ggtitle("相關係數 < 0")
# 將三個子圖組合成一個 3x1 的大圖
combined_plot <- plot1 + plot2 + plot3 + plot_layout(ncol = 1)
# 繪製三個子圖
plot1 <- ggplot(data1, aes(x, y)) + geom_point() + ggtitle("相關係數 > 0")
plot2 <- ggplot(data2, aes(x, y)) + geom_point() + ggtitle("相關係數 = 0")
plot3 <- ggplot(data3, aes(x, y)) + geom_point() + ggtitle("相關係數 < 0")
plot1
plot2
plot3
remotes::install_github("jhelvy/renderthis@v0.0.9")
video_files <- list.files(video_path,
pattern = "\\.mp4$",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_path  <- ""
video_files <- list.files(video_path,
pattern = "\\.mp4$",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_path  <- ""
video_files <- list.files(video_path,
pattern = "\\.mp4$",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_path  <- ""
video_files <- list.files(video_path,
pattern = "\\.mp4$",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_path  <- ""
video_files <- list.files(video_path,
pattern = "\\.mp4$",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- ""
video_files <- list.files(video_path,
pattern = "\.mp4$",
video_path  <- ""
video_files <- list.files(video_path,
pattern = "/.mp4$",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- ""
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- ""
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- ""
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- ""
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- ""
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- ""
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- ""
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- ""
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- ""
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- ""
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- "/Users/anthonysung/yueswater-blog/posts/2023-08-02-test/"
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- "/Users/anthonysung/yueswater-blog/posts/2023-08-02-test/"
video_files <- list.files(video_path,
pattern = "//.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
getwd()
wd <- getwd()
video_path  <- getwd()
video_files <- list.files(video_path,
pattern = "//.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_path  <- getwd()
video_files <- list.files(video_path,
pattern = "//.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- getwd()
video_files <- list.files(video_path,
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- getwd()
video_files <- list.files(video_path,
pattern = "//.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- getwd()
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path  <- getwd()
video_files <- list.files(video_path,
pattern = "/.mp4",
recursive = TRUE,
all.files = FALSE,
full.names = FALSE)
video_files
video_path  <- getwd()
video_files <- list.files(video_path,
recursive = TRUE,
all.files = FALSE,
full.names = FALSE)
video_files
video_path  <- getwd()
video_files <- list.files(video_path,
recursive = TRUE,
all.files = FALSE,
full.names = FALSE)
video_files[2]
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
wage <- read.csv("OECD_min_wage.csv")
View(wage)
library(dplyr)
library(tidyverse)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
View(wage)
c(2001:2022)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
korea <- filter(wage, Country == "Korea" & Series == "PPP")
print(korea)
View(korea)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
korea <- filter(wage[, "Value"], Country == "Korea" & Series == "PPP")
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
%>% filter(Country, Series, time, Value)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
%>% filter(Country, Series, time, Value)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
%>% filter(Country, Series, time, Value)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
wage <- filter(wage, Country, Series, time, Value)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
wage <- filter(wage, Country & Series & time & Value)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
korea <- subset(wage)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
korea <- subset(wage, Country == "Korea")
View(korea)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
korea <- subset(wage, Country == "Korea" & Series == "PPP")
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
korea <- subset(wage, Country == "Korea" & SERIES == "PPP")
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
korea <- subset(wage, Country == "Korea" & SERIES == "PPP" & Pay.period == "Annual")
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
korea <- subset(wage, Country == "Korea" & SERIES == "PPP" & Pay.period == "Annual" & Time %in% 2001:2022)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
korea <- subset(wage, Country == "Korea" & SERIES == "PPP" & Pay.period == "Annual" & Time %in% 2001:2022, select(Time, Value))
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
korea <- subset(wage, Country == "Korea" & SERIES == "PPP" & Pay.period == "Annual" & Time %in% 2001:2022, select = c(Time, Value))
View(korea)
wage <- read.csv("OECD_min_wage.csv") %>% as.data.frame()
korea <- subset(wage, Country == "Korea" & SERIES == "PPP" & Pay.period == "Hourly" & Time %in% 2001:2022, select = c(Time, Value))
View(korea)
wage <- read.csv("OECD_min_wage.csv") %>%
subset(wage, Country == "Korea" & SERIES == "PPP" & Pay.period == "Hourly" & Time %in% 2001:2022, select = c(Time, Value))
wage <- read.csv("OECD_min_wage.csv") %>%
subset(Country == "Korea" & SERIES == "PPP" & Pay.period == "Hourly" & Time %in% 2001:2022, select = c(Time, Value))
wage <- read.csv("OECD_min_wage.csv") %>%
subset(Country == "Korea" & SERIES == "PPP" & Pay.period == "Hourly" & Time %in% 2001:2022, select = c(Time, Value)) %>%
ggplot(aes(x = Time, y = Value)) +
geom_line() +
labs(title = "PPP Values Over Time for Korea", x = "Year", y = "PPP Value")
wage <- read.csv("OECD_min_wage.csv") %>%
subset(Country == "Korea" & SERIES == "PPP" & Pay.period == "Hourly" & Time %in% 2001:2022, select = c(Time, Value)) %>%
ggplot(aes(x = Time, y = Value)) +
geom_line() +
labs(title = "PPP Values Over Time for Korea", x = "Year", y = "PPP Value")
print(wage)
wage <- read.csv("OECD_min_wage.csv") %>%
subset(Country == "Korea" & SERIES == "PPP" & Pay.period == "Hourly" & Time %in% 2001:2022, select = c(Time, Value)) %>%
ggplot(aes(x = Time, y = Value)) +
geom_line() +
labs(title = "PPP Values Over Time for Korea", x = "Year", y = "PPP Value") +
theme(plot.title = element_text(family = "黑體-繁"))
print(wage)
wage <- read.csv("OECD_min_wage.csv") %>%
subset(Country == "Korea" & SERIES == "PPP" & Pay.period == "Hourly" & Time %in% 2001:2022, select = c(Time, Value)) %>%
ggplot(aes(x = Time, y = Value)) +
geom_line() +
labs(x = "年份", y = "薪資（單位：美元）") +
theme(plot.title = element_text(family = "黑體-繁"))
print(wage)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(showtext)
showtext_auto()
font_add("Noto Sans TC Medium",
library(dplyr)
library(tidyverse)
library(ggplot2)
library(showtext)
showtext_auto()
font_add("Noto Sans TC Medium")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(showtext)
showtext_auto()
font_add("黑體-繁")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(showtext)
showtext_auto()
font_add("黑體-繁", "/System/Library/Fonts/STHeiti Light.ttc")
wage <- read.csv("OECD_min_wage.csv") %>%
subset(Country == "Korea" & SERIES == "PPP" & Pay.period == "Hourly" & Time %in% 2001:2022, select = c(Time, Value)) %>%
ggplot(aes(x = Time, y = Value)) +
geom_line() +
labs(x = "年份", y = "薪資（單位：美元）") +
theme(plot.title = element_text(family = "黑體-繁"))
print(wage)
wage <- read.csv("OECD_min_wage.csv") %>%
subset(Country == "Korea" & SERIES == "PPP" & Pay.period == "Hourly" & Time %in% 2001:2022, select = c(Time, Value)) %>%
ggplot(aes(x = Time, y = Value)) +
geom_line() +
labs(x = "年份", y = "最低薪資（單位：美元）") +
theme(plot.title = element_text(family = "黑體-繁"))
print(wage)
wage <- read.csv("OECD_HHDEBT.csv") %>%
subset(LOCATION == "KOR", select = c(TIME, Value)) %>%
ggplot(aes(x = TIME, y = Value)) +
geom_line() +
geom_point() +
labs(x = "年份", y = "法定最低時薪（單位：美元）") +
theme(plot.title = element_text(family = "黑體-繁"))
print(wage)
# Load necessary library
library(car)
# Assuming 'data' is your dataframe, and it contains 'CAR' and 'category' columns
# Checking normality
apply(data[data$category == 1, , drop = FALSE], 2, shapiro.test)
library(car)
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx")
# Load necessary library
library(car)
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx")
View(data)
# Load necessary library
library(dplyr)
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx")
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx") %>%
select("CAR")
View(data)
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx") %>%
select("CAR", "category")
View(data)
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx")
View(data)
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx") %>%
select("CAR", "Category")
# Load necessary library
library(dplyr)
cat("\014")
rm(list = ls())
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx") %>%
select("CAR", "Category")
# Assuming 'data' is your dataframe, and it contains 'CAR' and 'category' columns
# Checking normality
apply(data[data$category == 1, , drop = FALSE], 2, shapiro.test)
data$CAR
typeof(data$CAR)
typeof(data$Category)
data$Category <- as.integer(data$Category)
# Assuming 'data' is your dataframe, and it contains 'CAR' and 'category' columns
# Checking normality
apply(data[data$category == 1, , drop = FALSE], 2, shapiro.test)
data[data$category == 1, ]
data[data$Category == 1, ]
# Load necessary library
library(dplyr)
cat("\014")
rm(list = ls())
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx") %>%
select("CAR", "Category")
data$Category <- as.integer(data$Category)
# Checking normality
apply(data[data$Category == 1, , drop = FALSE], 2, shapiro.test)
data[data$Category == 1, , drop = FALSE]
model <- lm(CAR ~ Category, data = data)
CAR.anova <- anova(model)
summary(CAR.anova)
View(CAR.anova)
table(data$CAR, data$Category)
cont_table <- table(data$CAR, data$Category)
# Load necessary library
library(dplyr)
cat("\014")
rm(list = ls())
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx") %>%
select("CAR", "Category")
data$Category <- as.integer(data$Category)
cont_table <- table(data$CAR, data$Category)
# Load necessary library
library(dplyr)
cat("\014")
rm(list = ls())
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx") %>%
select("CAR", "Category")
data$Category <- as.integer(data$Category)
cont_table <- table(data$CAR, data$Category)
# Load necessary library
library(dplyr)
cat("\014")
rm(list = ls())
data <- readxl::read_excel("~/Desktop/CAR_yuto.xlsx") %>%
select("CAR", "Category")
data$Category <- as.integer(data$Category)
count <- table(data$CAR, data$Category)
chisq.test(count)
t.test(count)
renv::init()
renv::snapshot()
rstudioapi::executeCommand('closeProject')
install.packages("rstudioapi")
rstudioapi::executeCommand('closeProject')
